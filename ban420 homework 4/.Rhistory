setwd("C:/Users/r_hop/parallel-computing-rasmushopen/ban420 homework 4")
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
library(magrittr)
library(tidyverse)
simDat <-
function(N, type, mu) {
if (type == "tweedie") {
return(rtweedie(
N,
mu = mu,
phi = 100,
power = 1.9
))
}
if (type == "normal") {
return(rnorm(N, mean = mu))
}
else{
stop("invalid distribution")
}
}
# Next, the test. Note, we use mu two places:
# both for the data simulation and as the null.
simTest <-
function(N, type, mu) {
t.test(simDat(N = N,
type = type,
mu = mu),
mu = mu)$p.value
}
# Running many tests is almost the same as before.
# Here the mean is hard coded in, as we're not
# going to change it.
MTests <-
function(N, M, type, sig) {
sum(replicate(M,
simTest(
N = N,
type =
type,
mu =
10000
)) < sig) / M
}
# We can now repeat the same analysis as before,
# but for both the tweedie and the normal:
df <-
expand.grid(
N = c(10, 100, 1000, 5000),
M = 1000,
type = c("tweedie", "normal"),
share_reject = NA
) %>%
as_tibble()
for (i in 1:nrow(df)) {
print(i)
df$share_reject[i] <-
MTests(df$N[i],
df$M[i],
df$type[i],
.05)
}
# As you see, with normally distributed data, N can
# be very small and the t-test is fine. With a tweedie,
# "large enough" can be many thousands. If we try
# different distributions or parameterizations, we might
# also get different results.
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = .05) +
theme_bw()
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
library(magrittr)
library(tidyverse)
simDat <-
function(N, type, mu) {
if (type == "tweedie") {
return(rtweedie(
N,
mu = mu,
phi = 100,
power = 1.9
))
}
if (type == "normal") {
return(rnorm(N, mean = mu))
}
else{
stop("invalid distribution")
}
}
# Next, the test. Note, we use mu two places:
# both for the data simulation and as the null.
simTest <-
function(N, type, mu) {
t.test(simDat(N = N,
type = type,
mu = mu),
mu = mu)$p.value
}
# Running many tests is almost the same as before.
# Here the mean is hard coded in, as we're not
# going to change it.
MTests <-
function(N, M, type, sig) {
sum(replicate(M,
simTest(
N = N,
type =
type,
mu =
10000
)) < sig) / M
}
# We can now repeat the same analysis as before,
# but for both the tweedie and the normal:
df <-
expand.grid(
N = c(10, 100, 1000, 5000),
M = 1000,
type = c("tweedie", "normal"),
share_reject = NA
) %>%
as_tibble()
for (i in 1:nrow(df)) {
print(i)
df$share_reject[i] <-
MTests(df$N[i],
df$M[i],
df$type[i],
.05)
}
# As you see, with normally distributed data, N can
# be very small and the t-test is fine. With a tweedie,
# "large enough" can be many thousands. If we try
# different distributions or parameterizations, we might
# also get different results.
df %>%
ggplot2::ggplot(aes(x = log(N), y = share_reject, col = type)) +
geom_line() +
geom_hline(yintercept = .05) +
theme_bw()
#Using parallel computing
library(foreach)
library(doParallel)
install.packages("foreach")
install.packages("doParallel")
install.packages("foreach")
#Using parallel computing
library(foreach)
library(doParallel)
View(df)
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
num_cores <- 4  # Adjust this number based on system
cl <- makeCluster(num_cores)
registerDoParallel(cl)
num_cores <- 4  # Adjust this number based on system
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Create a function to compute MTweedieTests for a single row of df
compute_share_reject <- function(i) {
MTweedieTests(N = df$N[i], M = df$M[i], sig = 0.05)
}
# Use foreach to parallelize the loop
result <- foreach(i = 1:nrow(df), .combine = 'c') %dopar% {
compute_share_reject(i)
}
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Create a function to compute MTweedieTests for a single row of df
compute_share_reject <- function(i) {
MTweedieTests(N = df$N[i], M = df$M[i], sig = 0.05)
}
# Use foreach to parallelize the loop
result <- foreach(i = 1:nrow(df), .combine = 'c') %dopar% {
compute_share_reject(i)
}
# Assignment 1:
library(tweedie)
library(ggplot2)
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
#Using parallel computing
library(foreach)
library(doParallel)
num_cores <- 4  # Adjust this number based on system
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Create a function to compute MTweedieTests for a single row of df
compute_share_reject <- function(i) {
MTweedieTests(N = df$N[i], M = df$M[i], sig = 0.05)
}
# Use foreach to parallelize the loop
result <- foreach(i = 1:nrow(df), .combine = 'c') %dopar% {
compute_share_reject(i)
}
#Using parallel computing
library(foreach)
# Set the number of cores you want to use for parallel processing
num_cores <- 4  # Adjust this number based on your system's capabilities
# Initialize a parallel backend using doParallel
library(doParallel)
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Create a custom function for MTweedieTests
calculate_share_reject <- function(N, M) {
MTweedieTests(N = N, M = M, sig = 0.05)
}
# Use foreach to parallelize the loop
df$share_reject <- foreach(i = 1:nrow(df), .combine = c) %dopar% {
calculate_share_reject(df$N[i], df$M[i])
}
# Stop the parallel backend
stopCluster(cl)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
View(df)
View(df)
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
rtweedie(N, mu=10000, phi=100, power=1.9)
rtweedie(10, mu=10000, phi=100, power=1.9
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
#Using parallel computing
library(foreach)
# Set the number of cores you want to use for parallel processing
num_cores <- 4  # Adjust this number based on your system's capabilities
# Initialize a parallel backend using doParallel
library(doParallel)
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Create a custom function for MTweedieTests
calculate_share_reject <- function(N, M) {
MTweedieTests(N = N, M = M, sig = 0.05)
}
# Use foreach to parallelize the loop
df$share_reject <- foreach(i = 1:nrow(df), .combine = c) %dopar% {
calculate_share_reject(df$N[i], df$M[i])
}
# Set the number of cores you want to use for parallel processing
num_cores <- 2  # Adjust this number based on your system's capabilities
# Initialize a parallel backend using doParallel
library(doParallel)
cl <- makeCluster(num_cores)
registerDoParallel(cl)
# Create a custom function for MTweedieTests
calculate_share_reject <- function(N, M) {
MTweedieTests(N = N, M = M, sig = 0.05)
}
# Use foreach to parallelize the loop
df$share_reject <- foreach(i = 1:nrow(df), .combine = c) %dopar% {
calculate_share_reject(df$N[i], df$M[i])
}
