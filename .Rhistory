share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
MTweedieTests <- function(N, M, sig, num_cores = detectCores()) {
cl <- makeCluster(num_cores) # Create a cluster with the specified number of cores
clusterExport(cl, c("N", "sig", "simTweedieTest"))
# Create a list of M elements, each representing one simulation
sim_results <- parLapply(cl, 1:M, function(i) {
replicate(1, simTweedieTest(N)) < sig
})
# Close the cluster
stopCluster(cl)
# Calculate the proportion of simulations where the test is less than sig
mean(unlist(sim_results))
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
MTweedieTests <- function(N, M, sig, num_cores = detectCores()) {
cl <- makeCluster(num_cores) # Create a cluster with the specified number of cores
clusterExport(cl, c("N", "sig", "simTweedieTest"))
# Create a list of M elements, each representing one simulation
sim_results <- parLapply(cl, 1:M, function(i) {
replicate(1, simTweedieTest(N)) < sig
})
# Close the cluster
stopCluster(cl)
# Calculate the proportion of simulations where the test is less than sig
mean(unlist(sim_results))
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
MTweedieTests <- function(N, M, sig, num_cores = 2) {
cl <- makeCluster(num_cores) # Create a cluster with the specified number of cores
clusterExport(cl, c("N", "sig", "simTweedieTest")) # Export necessary variables and functions to the cluster
# Create a list of M elements, each representing one simulation
sim_results <- parLapply(cl, 1:M, function(i) {
simTweedieTest(N) < sig  # Assuming simTweedieTest returns a numeric value
})
# Close the cluster
stopCluster(cl)
# Calculate the proportion of simulations where the test is less than sig
mean(unlist(sim_results))
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
warnings()
MTweedieTests <- function(N, M, sig, num_cores = 2) {
cl <- makeCluster(num_cores) # Create a cluster with the specified number of cores
clusterExport(cl, c("N", "sig", "simTweedieTest")) # Export necessary variables and functions to the cluster
# Create a list of M elements, each representing one simulation
sim_results <- parLapply(cl, 1:M, function(i) {
simTweedieTest(N) < sig  # Assuming simTweedieTest returns a numeric value
})
# Close the cluster
stopCluster(cl)
# Calculate the proportion of simulations where the test is less than sig
return(mean(unlist(sim_results)))
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
MTweedieTests <- function(N, M, sig, num_cores = 2) {
cl <- makeCluster(num_cores) # Create a cluster with the specified number of cores
clusterExport(cl, c("N", "sig", "simTweedieTest")) # Export necessary variables and functions to the cluster
# Create a list of M elements, each representing one simulation
sim_results <- parLapply(cl, 1:M, function(i) {
simTweedieTest(N) < sig  # Assuming simTweedieTest returns a numeric value
})
# Close the cluster
stopCluster(cl)
# Calculate the proportion of simulations where the test is less than sig
return(mean(unlist(sim_results)))
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
View(df)
MTweedieTests <- function(N, M, sig, num_cores = 2) {
cl <- makeCluster(num_cores) # Create a cluster with the specified number of cores
clusterExport(cl, c("N", "M", "sig", "simTweedieTest")) # Export necessary variables and functions to the cluster
# Create a list of M elements, each representing one simulation
sim_results <- parLapply(cl, 1:M, function(i) {
simTweedieTest(N) < sig  # Assuming simTweedieTest returns a numeric value
})
# Close the cluster
stopCluster(cl)
# Calculate the proportion of simulations where the test is less than sig
return(mean(unlist(sim_results)))
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
MTweedieTests <- function(N, M, sig, num_cores = 2) {
cl <- makeCluster(num_cores) # Create a cluster with the specified number of cores
clusterExport(cl, varlist = c("N", "M", "sig", "simTweedieTest")) # Export necessary variables and functions to the cluster
# Create a list of M elements, each representing one simulation
sim_results <- parLapply(cl, 1:M, function(i) {
simTweedieTest(N) < sig  # Assuming simTweedieTest returns a numeric value
})
# Close the cluster
stopCluster(cl)
# Calculate the proportion of simulations where the test is less than sig
return(mean(unlist(sim_results)))
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
MTweedieTests <- function(N, M, sig, num_cores = 2) {
cl <- makeCluster(num_cores) # Create a cluster with the specified number of cores
clusterExport(cl, c("N", "M", "sig", "simTweedieTest", "df")) # Export necessary variables and functions to the cluster
# Create a list of M elements, each representing one simulation
sim_results <- parLapply(cl, 1:M, function(i) {
simTweedieTest(N) < sig  # Assuming simTweedieTest returns a numeric value
})
# Close the cluster
stopCluster(cl)
# Calculate the proportion of simulations where the test is less than sig
return(mean(unlist(sim_results)))
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
df$N
MTweedieTests <- function(N, M, sig, num_cores = detectCores()) {
cl <- makeCluster(num_cores) # Create a cluster with the specified number of cores
clusterExport(cl, c("simTweedieTest")) # Export necessary variables and functions to the cluster
clusterEvalQ(cl, library(tweedie))
# Create a list of M elements, each representing one simulation
sim_results <- parLapply(cl, 1:M, function(i) {
simTweedieTest(N) < sig  # Assuming simTweedieTest returns a numeric value
})
# Close the cluster
stopCluster(cl)
# Calculate the proportion of simulations where the test is less than sig
return(mean(unlist(sim_results)))
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
MTweedieTests <- function(N, M, sig, num_cores = detectCores()) {
cl <- makeCluster(num_cores) # Create a cluster with the specified number of cores
clusterEvalQ(cl, library(tweedie))
# Create a list of M elements, each representing one simulation
sim_results <- parLapply(cl, 1:M, function(i) {
simTweedieTest(N) < sig  # Assuming simTweedieTest returns a numeric value
})
# Close the cluster
stopCluster(cl)
# Calculate the proportion of simulations where the test is less than sig
return(mean(unlist(sim_results)))
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
MTweedieTests <- function(N, M, sig, num_cores = detectCores()) {
cl <- makeCluster(num_cores) # Create a cluster with the specified number of cores
clusterEvalQ(cl, library(tweedie))
clusterExport(cl,list('simTweedieTest','df'))
# Create a list of M elements, each representing one simulation
sim_results <- parLapply(cl, 1:M, function(i) {
simTweedieTest(N) < sig  # Assuming simTweedieTest returns a numeric value
})
# Close the cluster
stopCluster(cl)
# Calculate the proportion of simulations where the test is less than sig
return(mean(unlist(sim_results)))
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
MTweedieTests <- function(N, M, sig) {
cl <- makeCluster(detectCores()) # Create a cluster with the specified number of cores
clusterEvalQ(cl, library(tweedie))
clusterExport(cl,list('simTweedieTest','df'))
# Create a list of M elements, each representing one simulation
sim_results <- parLapply(cl, 1:M, function(i) {
simTweedieTest(N) < sig  # Assuming simTweedieTest returns a numeric value
})
# Close the cluster
stopCluster(cl)
# Calculate the proportion of simulations where the test is less than sig
return(mean(unlist(sim_results)))
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
MTweedieTests <- function(N, M, sig) {
cl <- makeCluster(detectCores()) # Create a cluster with the specified number of cores
clusterEvalQ(cl, library(tweedie))
clusterExport(cl,list('simTweedieTest','df', "i"))
# Create a list of M elements, each representing one simulation
sim_results <- parLapply(cl, 1:M, function(i) {
simTweedieTest(N) < sig  # Assuming simTweedieTest returns a numeric value
})
# Close the cluster
stopCluster(cl)
# Calculate the proportion of simulations where the test is less than sig
return(mean(unlist(sim_results)))
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
for(i in 1:nrow(df)){
print(i)
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
for(i in 1:nrow(df)){
df$share_reject[i] <-
MTweedieTests(
N=df$N[i],
M=df$M[i],
sig=.05)
}
# Assignment 1:
library(tweedie)
library(ggplot2)
simTweedieTest <-
function(N){
t.test(
rtweedie(N, mu=10000, phi=100, power=1.9),
mu=10000
)$p.value
}
# Assignment 2:
MTweedieTests <-
function(N,M,sig){
sum(replicate(M,simTweedieTest(N)) < sig)/M
}
# Assignment 3:
df <-
expand.grid(
N = c(10,100,1000,5000, 10000),
M = 1000,
share_reject = NA)
#Using parallel computing
library(foreach)
#Using parallel computing
library(foreach)
library(doParallel)
# Set the number of cores to use
num_cores <- detectCores()  # Adjust this number based om pc
cl <- makeCluster(detectCores()) # Adjust this number based om pc
registerDoParallel(cl)
clusterEvalQ(cl, library(tweedie)) #Load packages within loop such that the "workers" have access
# Create a custom function for MTweedieTests
calculate_share_reject <- function(N, M) {
MTweedieTests(N = N, M = M, sig = 0.05)
}
# Use foreach to parallelize the loop
df$share_reject <- foreach(i = 1:nrow(df), .combine = c) %dopar% {
calculate_share_reject(df$N[i], df$M[i])
}
# Stop the parallel backend
stopCluster(cl)
setwd("C:/Users/r_hop/parallel-computing-rasmushopen")
# Load the tictoc package
library(tictoc)
install.packages(tictoc)
install.packages("tictoc")
# Load the tictoc package
library(tictoc)
# Directory containing the R scripts you want to source
script_directory <- "scripts"
# List of script files in the directory
script_files <- list.files(path = script_directory, pattern = "\\.R$", full.names = TRUE)
# Create a function to source a script and time its execution
source_and_time_script <- function(script_file) {
cat("Sourcing script:", basename(script_file), "\n")
tic()  # Start the timer
source(script_file)  # Source the script
toc()  # Stop the timer and print elapsed time
}
# Loop through the script files and source each one while timing execution
for (script_file in script_files) {
source_and_time_script(script_file)
}
?tic
tic.log
# Load the tictoc package
library(tictoc)
# Directory containing the R scripts you want to source
script_directory <- "scripts"
# List of script files in the directory
script_files <- list.files(path = script_directory, pattern = "\\.R$", full.names = TRUE)
# Create a function to source a script and time its execution
source_and_time_script <- function(script_file) {
cat("Sourcing script:", basename(script_file), "\n")
tic()  # Start the timer
source(script_file)  # Source the script
toc()  # Stop the timer and print elapsed time
}
# Loop through the script files and source each one while timing execution
for (script_file in script_files) {
source_and_time_script(script_file)
}
?source
?source()
# Load the tictoc package
library(tictoc)
# List of script files to be sourced
script_files <- c("method1.r", "method2.r", "method3.r")
# Create a function to source a script and time its execution
source_and_time_script <- function(script_file) {
cat("Sourcing script:", script_file, "\n")
tic()  # Start the timer
source(paste0("scripts/", script_file))  # Source the script from the "scripts" directory
toc()  # Stop the timer and print elapsed time
}
# Loop through the script files and source each one while timing execution
for (script_file in script_files) {
source_and_time_script(script_file)
}
# List of script files to be sourced
script_files <- c("method1.r", "method2.r", "method3.r")
# Create a function to source a script and time its execution
source_and_time_script <- function(script_file) {
cat("Sourcing script:", script_file, "\n")
tic()  # Start the timer
source(paste0("scripts/", script_file))  # Source the script from the "scripts" directory
toc()  # Stop the timer and print elapsed time
}
# Loop through the script files and source each one while timing execution
for (script_file in script_files) {
source_and_time_script(script_file)
}
